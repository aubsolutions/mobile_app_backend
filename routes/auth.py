# routes/auth.py

from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
from passlib.context import CryptContext
from pydantic import BaseModel, EmailStr
from typing import Optional, Dict, Any
from datetime import datetime, timedelta
from jose import jwt

from database import get_db
from models import User, Subscription, Employee

router = APIRouter()
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# üîê JWT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SECRET_KEY = "super-secret-key"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24  # 1 –¥–µ–Ω—å

# –í–∞–∂–Ω–æ: tokenUrl —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è Swagger).
# –°–∞–º–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤.
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/login")


# ---------------------
# Pydantic –º–æ–¥–µ–ª–∏
# ---------------------
class RegisterRequest(BaseModel):
    name: str
    company: Optional[str] = None
    phone: str
    email: EmailStr
    password: str
    terms_accepted_at: datetime


class UpdateUserRequest(BaseModel):
    name: Optional[str] = None
    company: Optional[str] = None
    email: Optional[EmailStr] = None


class LoginRequest(BaseModel):
    phone: str
    password: str


class EmployeeLoginRequest(BaseModel):
    phone: str
    password: str


# ---------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ---------------------
@router.post("/register/")
def register_user(data: RegisterRequest, db: Session = Depends(get_db)):
    existing = db.query(User).filter(User.phone == data.phone).first()
    if existing:
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    hashed = pwd_context.hash(data.password)
    user = User(
        name=data.name,
        company=data.company,
        phone=data.phone,
        email=data.email,
        password_hash=hashed,
        terms_accepted_at=data.terms_accepted_at,
    )
    db.add(user)
    db.commit()
    db.refresh(user)

    # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 14 –¥–Ω–µ–π
    sub = Subscription(
        user_id=user.id,
        type="free",
        start_date=datetime.utcnow(),
        end_date=datetime.utcnow() + timedelta(days=14),
    )
    db.add(sub)
    db.commit()
    db.refresh(sub)

    return {
        "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
        "user_id": user.id,
        "subscription_end": sub.end_date,
    }


# ---------------------
# –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–ª–∞–¥–µ–ª—å—Ü–∞)
# ---------------------
@router.post("/login")
def login_user(data: LoginRequest, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.phone == data.phone).first()
    if not user or not pwd_context.verify(data.password, user.password_hash):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    token_data = {
        "sub": str(user.id),
        "exp": datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES),
    }
    token = jwt.encode(token_data, SECRET_KEY, algorithm=ALGORITHM)
    return {"access_token": token, "token_type": "bearer"}


# ---------------------
# –õ–æ–≥–∏–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
# ---------------------
@router.post("/employee/login")
def login_employee(data: EmployeeLoginRequest, db: Session = Depends(get_db)):
    emp = db.query(Employee).filter(Employee.phone == data.phone).first()
    if not emp or not pwd_context.verify(data.password, emp.password_hash):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    if emp.is_blocked:
        raise HTTPException(status_code=403, detail="–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")

    token_data = {
        "sub": f"emp:{emp.id}",
        "exp": datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES),
    }
    token = jwt.encode(token_data, SECRET_KEY, algorithm=ALGORITHM)
    return {"access_token": token, "token_type": "bearer"}


# ---------------------
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
# ---------------------
def get_current_user(
    token: str = Depends(oauth2_scheme),
    db: Session = Depends(get_db),
) -> User:
    # –û–∂–∏–¥–∞–µ–º —Ç–æ–∫–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–∞: sub == "<user_id>"
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        sub = payload.get("sub")
        if sub is None or not str(sub).isdigit():
            raise ValueError("Not a user token")
        user_id = int(sub)
    except Exception:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return user


def get_current_employee(
    token: str = Depends(oauth2_scheme),
    db: Session = Depends(get_db),
) -> Employee:
    # –û–∂–∏–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: sub == "emp:<id>"
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        sub = payload.get("sub", "")
        if not isinstance(sub, str) or not sub.startswith("emp:"):
            raise ValueError("Not an employee token")
        emp_id = int(sub.split(":", 1)[1])
    except Exception:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")

    emp = db.query(Employee).filter(Employee.id == emp_id).first()
    if not emp:
        raise HTTPException(status_code=404, detail="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    if emp.is_blocked:
        raise HTTPException(status_code=403, detail="–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
    return emp


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∑–æ–ª–≤–µ—Ä –∞–∫—Ç—ë—Ä–∞ (–≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)
def get_actor(
    token: str = Depends(oauth2_scheme),
    db: Session = Depends(get_db),
) -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      {"role": "user", "user": <User>, "employee": None}
      –∏–ª–∏
      {"role": "employee", "user": None, "employee": <Employee>}
    """
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        sub = payload.get("sub", "")

        # –°–æ—Ç—Ä—É–¥–Ω–∏–∫
        if isinstance(sub, str) and sub.startswith("emp:"):
            emp_id = int(sub.split(":", 1)[1])
            emp = db.query(Employee).filter(Employee.id == emp_id).first()
            if not emp:
                raise HTTPException(status_code=404, detail="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            if emp.is_blocked:
                raise HTTPException(status_code=403, detail="–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
            return {"role": "employee", "employee": emp, "user": None}

        # –í–ª–∞–¥–µ–ª–µ—Ü
        user_id = int(sub)
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {"role": "user", "employee": None, "user": user}

    except Exception:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")


# ---------------------
# –ü—Ä–æ—Ñ–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
# ---------------------
@router.get("/me")
def get_me(
    actor: Dict[str, Any] = Depends(get_actor),
    db: Session = Depends(get_db),
):
    if actor["role"] == "user":
        user: User = actor["user"]
        sub = db.query(Subscription).filter(Subscription.user_id == user.id).first()
        return {
            "role": "user",
            "id": user.id,
            "name": user.name,
            "company": user.company,
            "phone": user.phone,
            "email": user.email,
            "terms_accepted_at": user.terms_accepted_at,
            "subscription_end": sub.end_date if sub else None,
        }
    else:
        emp: Employee = actor["employee"]
        # –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∫–æ–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç–µ –∏–Ω–∞—á–µ),
        # –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–æ–ª—å.
        return {
            "role": "employee",
            "id": emp.id,
            "name": emp.name,
            "phone": emp.phone,
            "owner_id": emp.owner_id,
            "is_blocked": emp.is_blocked,
        }


# ---------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
# ---------------------
@router.put("/me")
def update_me(
    data: UpdateUserRequest,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db),
):
    if data.name is not None:
        current_user.name = data.name
    if data.company is not None:
        current_user.company = data.company
    if data.email is not None:
        current_user.email = data.email

    db.commit()
    db.refresh(current_user)
    return {"message": "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω"}