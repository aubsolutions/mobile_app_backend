from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from passlib.context import CryptContext
from pydantic import BaseModel, EmailStr
from typing import Optional
from jose import JWTError, jwt
from datetime import datetime, timedelta
from fastapi.security import OAuth2PasswordBearer
from database import SessionLocal
from models import User
from models import User, Subscription


router = APIRouter()
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# üîê JWT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SECRET_KEY = "super-secret-key"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24  # 1 –¥–µ–Ω—å

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/login")

# ---------------------
# DB dependency
# ---------------------
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# ---------------------
# Pydantic –º–æ–¥–µ–ª–∏
# ---------------------
class RegisterRequest(BaseModel):
    name: str
    company: Optional[str] = None
    phone: str
    email: EmailStr
    password: str
    terms_accepted_at: datetime  # üëà –î–û–ë–ê–í–¨ –≠–¢–û –ü–û–õ–ï

class UpdateUserRequest(BaseModel):
    name: Optional[str]
    company: Optional[str]
    email: Optional[EmailStr]

class LoginRequest(BaseModel):
    phone: str
    password: str

class EmployeeLoginRequest(BaseModel):
    phone: str
    password: str

# ---------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
# ---------------------
@router.post("/register/")
def register_user(data: RegisterRequest, db: Session = Depends(get_db)):
    existing_user = db.query(User).filter(User.phone == data.phone).first()
    if existing_user:
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    hashed_password = pwd_context.hash(data.password)

    user = User(
        name=data.name,
        company=data.company,
        phone=data.phone,
        email=data.email,
        password_hash=hashed_password,
        terms_accepted_at=data.terms_accepted_at  # üëà –§–∏–∫—Å–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–∏—è
    )
    db.add(user)
    db.commit()
    db.refresh(user)

    subscription = Subscription(
        user_id=user.id,
        type="free",
        start_date=datetime.utcnow(),
        end_date=datetime.utcnow() + timedelta(days=14)  #14 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ
    )
    db.add(subscription)
    db.commit()
    db.refresh(subscription)
    return {
    "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
    "user_id": user.id,
    "subscription_end": subscription.end_date
}

# ---------------------
# –õ–æ–≥–∏–Ω
# ---------------------
@router.post("/login")
def login(data: LoginRequest, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.phone == data.phone).first()
    if not user or not pwd_context.verify(data.password, user.password_hash):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    token_data = {
        "sub": str(user.id),
        "exp": datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    }
    token = jwt.encode(token_data, SECRET_KEY, algorithm=ALGORITHM)
    return {"access_token": token, "token_type": "bearer"}

# ---------------------
# –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
# ---------------------

@router.post("/employee/login")
def login_employee(data: EmployeeLoginRequest, db: Session = Depends(get_db)):
    emp = db.query(Employee).filter(Employee.phone == data.phone).first()
    if not emp or not pwd_context.verify(data.password, emp.password_hash):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    if emp.is_blocked:
        raise HTTPException(status_code=403, detail="–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
    token_data = {
        "sub": f"emp:{emp.id}",
        "exp": datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    }
    token = jwt.encode(token_data, SECRET_KEY, algorithm=ALGORITHM)
    return {"access_token": token, "token_type": "bearer"}

# ---------------------
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ---------------------
def get_current_user(
    token: str = Depends(oauth2_scheme),
    db: Session = Depends(get_db),
) -> User:
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id = int(payload.get("sub"))
    except (JWTError, ValueError):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")

    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return user

# ---------------------
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
# ---------------------

def get_current_employee(
    token: str = Depends(oauth2_scheme),
    db: Session = Depends(get_db),
) -> Employee:
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        sub = payload.get("sub", "")
        # –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "emp:<id>"
        if not sub.startswith("emp:"):
            raise ValueError()
        emp_id = int(sub.split(":", 1)[1])
    except Exception:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")

    emp = db.query(Employee).filter(Employee.id == emp_id).first()
    if not emp:
        raise HTTPException(status_code=404, detail="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    if emp.is_blocked:
        raise HTTPException(status_code=403, detail="–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
    return emp

# ---------------------
# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
# ---------------------
@router.get("/me")
def get_me(current_user: User = Depends(get_current_user), db: Session = Depends(get_db)):
    subscription = db.query(Subscription).filter(Subscription.user_id == current_user.id).first()
    return {
        "id": current_user.id,
        "name": current_user.name,
        "company": current_user.company,
        "phone": current_user.phone,
        "email": current_user.email,
        "terms_accepted_at": current_user.terms_accepted_at,  # üëà –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞ —Ñ—Ä–æ–Ω—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
         "subscription_end": subscription.end_date if subscription else None
    }

# ---------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
# ---------------------
@router.put("/me")
def update_user_profile(
    update_data: UpdateUserRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if update_data.name is not None:
        current_user.name = update_data.name
    if update_data.company is not None:
        current_user.company = update_data.company
    if update_data.email is not None:
        current_user.email = update_data.email

    db.commit()
    db.refresh(current_user)
    return {"message": "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω"}

@router.post("/employee/login")
def login_employee(data: EmployeeLoginRequest, db: Session = Depends(get_db)):
    emp = db.query(Employee).filter(Employee.phone == data.phone).first()
    if not emp or not pwd_context.verify(data.password, emp.password_hash):
        raise HTTPException(401, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    if emp.is_blocked:
        raise HTTPException(403, "–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
    token_data = {"sub": f"emp:{emp.id}", "exp": datetime.utcnow() + timedelta(days=1)}
    token = jwt.encode(token_data, SECRET_KEY, algorithm=ALGORITHM)
    return {"access_token": token, "token_type": "bearer"}