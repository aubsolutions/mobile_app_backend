from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from starlette.responses import JSONResponse as StarletteJSONResponse
from pydantic import BaseModel
from sqlalchemy.orm import Session
from passlib.context import CryptContext

from database import engine, get_db
from models import Base, User
from routes import invoice, auth

# üëá –ö–∞—Å—Ç–æ–º–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
class UTF8JSONResponse(StarletteJSONResponse):
    media_type = "application/json; charset=utf-8"

# üëá –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(default_response_class=UTF8JSONResponse)

@app.exception_handler(HTTPException)
async def custom_http_exception_handler(request: Request, exc: HTTPException):
    return JSONResponse(
        status_code=exc.status_code,
        content={"detail": str(exc.detail)},
        media_type="application/json; charset=utf-8",
    )

# üëá –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(bind=engine)

# üëá CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ‚ö†Ô∏è –ù–∞ –ø—Ä–æ–¥–µ ‚Äî —É–∫–∞–∂–∏ –¥–æ–º–µ–Ω
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üëá –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤
app.include_router(invoice.router)
app.include_router(auth.router)

# üëâ –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# üëá –ú–æ–¥–µ–ª—å –ª–æ–≥–∏–Ω–∞
class LoginRequest(BaseModel):
    phone: str
    password: str

# üëá –†–µ–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω
@app.post("/login")
def login(data: LoginRequest, db: Session = Depends(get_db)):
    print(f"üî• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ª–æ–≥–∏–Ω: phone={data.phone}, password={data.password}")

    user = db.query(User).filter(User.phone == data.phone).first()
    if not user:
        raise HTTPException(status_code=401, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if not pwd_context.verify(data.password, user.password_hash):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

    # ‚úÖ –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–æ–∫–µ–Ω–∞
    return {"token": "fake-jwt-token"}

# üëá –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å—ë –∂–∏–≤–æ
@app.get("/")
def health():
    return {"status": "ok"}
